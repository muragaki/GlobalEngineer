package grobal;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Font;
import java.awt.Toolkit;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.util.Calendar;
import java.util.TimeZone;

import javax.swing.DefaultCellEditor;
import javax.swing.JSpinner;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.SpinnerNumberModel;
import javax.swing.SwingConstants;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumn;

/**
 *
 * @author kom
 */
public class CalendarDlg extends javax.swing.JDialog {
	public boolean btnflag=false;
	public String strDate;
	private String[] columnNames = {"日", "月", "火", "水", "木", "金", "土"};
	//NetBeansのデザイナのjTable1のプロパティのmodelに、ユーザコード→カスタムコードで、
	//tableModelを設定。(  jTable1.setModel(tableModel); となるように。)
	DefaultTableModel tableModel = new DefaultTableModel(columnNames, 0);
	String[][] tabledata = new String[6][7];

	public CalendarDlg(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();

		SpinnerNumberModel spmodel1 = new SpinnerNumberModel(2014, 1, null, 1);
		jSpinner1.setModel(spmodel1);
		SpinnerNumberModel spmodel2 = new SpinnerNumberModel(1, 1, 12, 1);
		jSpinner2.setModel(spmodel2);

		for(int i = 0 ; i < tabledata.length ; i++){
			tableModel.addRow(tabledata[i]);
		}

		jTable1.setFont(new Font(Font.DIALOG, Font.PLAIN, 12));//通常表示時のフォント

		TableCellMyRenderer myRen1 = new TableCellMyRenderer();

		TableCellMyRenderer myRen2 = new TableCellMyRenderer();
		myRen2.setBackground(Color.PINK);
		
		TableCellMyRenderer myRen3 = new TableCellMyRenderer();
		myRen3.setBackground(Color.CYAN);

	
		for (int i = 0; i < jTable1.getColumnCount(); ++i) {
			TableColumn tc = jTable1.getColumn(jTable1.getColumnName(i));
			if(i==0){
				tc.setCellRenderer(myRen2);//Pink Background(日曜日)
			}else if(i==6){
				tc.setCellRenderer(myRen3);//Cyan Background(土曜日)
			}else{
				tc.setCellRenderer(myRen1);
			}
		}
		//以下の2行は、セル単位で選択できるようにするための記述。
		jTable1.setColumnSelectionAllowed(false);
		jTable1.setRowSelectionAllowed(false);
		//以下は、年表示スピナで、３桁ごとのコンマ表示をさせないため。
		JSpinner.NumberEditor editor = new JSpinner.NumberEditor(jSpinner1, "0");
		jSpinner1.setEditor(editor);
		
		//以下は、起動時に現在の年月でカレンダが表示されるようにするためのもの。
		Calendar cal = Calendar.getInstance(TimeZone.getTimeZone("Japan"));
		Integer Year = new Integer(cal.get(Calendar.YEAR));
		jSpinner1.setValue(Year);
		Integer Month = new Integer(cal.get(Calendar.MONTH)+1);
		jSpinner2.setValue(Month);
		makeTable();
		
		//クリックではセル内容編集状態にならないようにする。(ダブルクリックすると
		//編集状態になるが)
		jTable1.putClientProperty("JTable.autoStartsEdit", Boolean.FALSE);
		
		addWindowListener(new WindowAdapter() {
			public void windowClosed(WindowEvent e) {
				btnflag=false;
			}
		});
		moveCenter();
		
	}
    private void moveCenter(){
        Dimension dim=Toolkit.getDefaultToolkit().getScreenSize();
        setLocation( (dim.width-getSize().width)/2,(dim.height-getSize().height)/2);
    }
	/**
	 * This method is called from within the constructor to initialize the form. WARNING: Do NOT
	 * modify this code. The content of this method is always regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jSpinner1 = new javax.swing.JSpinner();
        jSpinner2 = new javax.swing.JSpinner();
        JlabelNen = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jBtnOK = new javax.swing.JButton();
        jBtnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        jTable1.setModel(tableModel);
        jTable1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTable1MouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTable1);

        JlabelNen.setText("年");

        jLabel1.setText("月");

        jBtnOK.setText("OK");
        jBtnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnOKActionPerformed(evt);
            }
        });

        jBtnCancel.setText("Cancel");
        jBtnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JlabelNen)
                .addGap(11, 11, 11)
                .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1))
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                .addGroup(layout.createSequentialGroup()
                    .addComponent(jBtnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                    .addComponent(jBtnCancel))
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 208, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jSpinner1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jSpinner2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(JlabelNen)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBtnCancel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBtnOK)
                        .addGap(0, 0, Short.MAX_VALUE))))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTable1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTable1MouseClicked
		int selRow = jTable1.getSelectedRow();
		int selCol= jTable1.getSelectedColumn();
		String strcd= (String)jTable1.getValueAt(selRow, selCol);
		if(strcd==null || strcd.equals("")){
			return;
		}
		int cd=Integer.parseInt(strcd);
		if(cd<1 || cd>31){
			return;
		}else{
			strDate=Integer.toString((Integer)jSpinner1.getValue())+
					"/"+Integer.toString((Integer)jSpinner2.getValue())+
					"/"+strcd;
		}
    }//GEN-LAST:event_jTable1MouseClicked

    private void jBtnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnOKActionPerformed
		this.setVisible(false);
    }//GEN-LAST:event_jBtnOKActionPerformed

    private void jBtnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCancelActionPerformed
        strDate="";
		this.setVisible(false);
    }//GEN-LAST:event_jBtnCancelActionPerformed

	private void makeTable(){
		int year,month,day=1,m=1,n, lastDay,i1;
		int ypos=0;
		String strYear = jSpinner1.getValue().toString();
		String strMonth = jSpinner2.getValue().toString();
		year=Integer.parseInt(strYear);
		month=Integer.parseInt(strMonth);

		dataClear(); //表の内容をいったんクリア

		CalcDate a=new CalcDate(year,month,day);
		CalcDate b=new CalcDate(1,1,1);
		n = a.defference(b); //西暦1年1/1から現在の月の初めまでの日数
		n = n % 7 + 1; //現在の月の初日の曜日(1:日曜)
		if( n == 7 ){
			n = 0;
		}

		lastDay = CalcDate.dayNumber( year, month);

		for(int i=0 ; i<7 ; i++){ //表の一行目の処理
			if(i>=n){
				jTable1.setValueAt(Integer.toString(m), ypos, i);
				m++;
			}
		}
		ypos++; //次の行へ

		while(m<= lastDay){ //lastDayは月の最終日
			for(int i=0; i<7 && m<=lastDay; i++){
				jTable1.setValueAt(Integer.toString(m), ypos, i);
				m++;
			}
			ypos++;
		}

	}

	void dataClear(){
		//DefaultTableModel jTable1Model = (DefaultTableModel)jTable1.getModel();
		int ix=jTable1.getColumnCount();
		int iy=jTable1.getRowCount();
		for (int i=0; i<ix; i++){
			for(int j=0;j<iy;j++){
				jTable1.setValueAt(null, j, i);
			}
		}
	}		
		/**
	 * @param args the command line arguments
	 */
	public static void main(String args[]) {
		/* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
		 * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
		 */
		try {
			for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
				if ("Nimbus".equals(info.getName())) {
					javax.swing.UIManager.setLookAndFeel(info.getClassName());
					break;
				}
			}
		} catch (ClassNotFoundException ex) {
			java.util.logging.Logger.getLogger(CalendarDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (InstantiationException ex) {
			java.util.logging.Logger.getLogger(CalendarDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (IllegalAccessException ex) {
			java.util.logging.Logger.getLogger(CalendarDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		} catch (javax.swing.UnsupportedLookAndFeelException ex) {
			java.util.logging.Logger.getLogger(CalendarDlg.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
		}
        //</editor-fold>

		/* Create and display the dialog */
		java.awt.EventQueue.invokeLater(new Runnable() {
			public void run() {
				CalendarDlg dialog = new CalendarDlg(new javax.swing.JFrame(), true);
				dialog.addWindowListener(new java.awt.event.WindowAdapter() {
					@Override
					public void windowClosing(java.awt.event.WindowEvent e) {
						System.exit(0);
					}
				});
				dialog.setVisible(true);
			}
		});
	}

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel JlabelNen;
    private javax.swing.JButton jBtnCancel;
    private javax.swing.JButton jBtnOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinner1;
    private javax.swing.JSpinner jSpinner2;
    private javax.swing.JTable jTable1;
    // End of variables declaration//GEN-END:variables
}

/*
   クラスMyRendererの定義
 */
class TableCellMyRenderer extends DefaultTableCellRenderer {
	//JTableの表示をコントロールするためのクラス
	public boolean editable=false;

	//表の編集を不可にするために、編集不可属性のセルエディタを作成する。
	JTextField txfld=new JTextField("");
	JTextField txfldEditable=new JTextField("");
	DefaultCellEditor defCE, editableCE;

	TableCellMyRenderer(){
		txfld.setEditable(false);
		txfldEditable.setEditable(true);
		txfld.setFont(new Font(Font.DIALOG,Font.PLAIN, 10));//編集時のフォント
		txfldEditable.setFont(new Font(Font.DIALOG,Font.PLAIN, 10));//編集時のフォント
		defCE=new DefaultCellEditor(txfld);
		editableCE=new DefaultCellEditor(txfldEditable);
	}

	@Override
	public Component getTableCellRendererComponent(
			final JTable table,
			final Object value,
			final boolean isSelected,
			final boolean hasFocus,
			final int row,
			final int column
	) {
		this.setHorizontalAlignment(SwingConstants.CENTER);

		for (int i = 0; i < table.getColumnCount(); ++i) {
			TableColumn tc = table.getColumn(table.getColumnName(i));
			if(editable){
				tc.setCellEditor(editableCE);
			}else{
				tc.setCellEditor(defCE);
			}
		}
		return super.getTableCellRendererComponent(table, value,
				isSelected, hasFocus, row, column);
	}
}

/*
   クラスDateCalcの定義
 */
class CalcDate{
    private int year;  //現在年
    private int month; //現在月
    private int day;   //現在日
    public int totalDay;    //西暦１年１月１日から現在までの日数
    //
    CalcDate(){}
    //
    CalcDate(int cyear, int cmonth, int cday)
    {
        int wkYear, wkMonth;
        year = cyear;
        month = cmonth;
        day = cday;
        totalDay = day; //西暦１年からの通算日数
        for(wkYear=1; wkYear<year; wkYear++){
			//現在の年の前年までの日数をまず計算
            if(isLeapYear(wkYear))
                totalDay += 366; //閏年なら366日
            else
                totalDay += 365;
        }
        for(wkMonth=1; wkMonth<month; wkMonth++){
			//現在の年の現在の月の前月までの日数を計算
			totalDay += dayNumber(year,  wkMonth);
        }
    }

	CalcDate(int dayCount)
    {
		//AD１年１月１日からの経過日数をパラメータとしてコンストラクタを呼び出す場合
        int wkSum=0;
		boolean sw=false; //作業用変数
        totalDay = 0;
        year = 1;
        month = 1;

        while(true){
			//まず、１年単位で日数を加えていき、与えられた日数を越えたら
			//ループを終了
            if(isLeapYear(year)){
                wkSum += 366;
			} else {
				wkSum +=365;
			}
			
            if(wkSum<dayCount){
                totalDay=wkSum;
                year++;
            } else {
				break;
			}
        }

        while(true){
			//その後、月単位で１月から順に日数を加えていく
            wkSum=dayNumber(year,  month); //月の日数
			
            if(totalDay+wkSum < dayCount){
                totalDay += wkSum;
                month++;
            }
            else{
                day = dayCount - totalDay;
                totalDay += day;
				break;
            }
        }
    }
	
	static boolean isLeapYear(int y){
		if((y %4 == 0 && y % 100 != 0) || y % 400 == 0){
			return true;
		}else{
			return false;
		}
	}

	static int dayNumber(int yr, int mn){
        int wk=0;
		if(mn==2){
                if(isLeapYear(yr)){
                    wk=29;
				} else{
                    wk=28;
				}
            } else{
                if(mn==4 || mn==6 || mn==9 || mn==11){
                    wk=30;
				} else{
                    wk=31;
				}
            }
		return wk;
	}

	int defference(CalcDate d2)
    {
		//他のDateCalcの持つ日数との差を計算する。
		//月初めまでの日数を求めるために使う。
		//月初めまでの日数がわかれば、月初めの曜日が計算できる。
        return totalDay - d2.totalDay;
    }
}